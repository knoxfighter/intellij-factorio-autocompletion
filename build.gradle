import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.15.0'
    id 'org.jetbrains.changelog' version '2.2.0'
    id "org.sonarqube" version "4.3.1.3277"
    id 'jacoco'
    id 'io.freefair.lombok' version '8.3'
}

group 'moe.knox.factorio'
version '1.4.0-IDEA231-eap-2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url = uri("https://jitpack.io") }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.github.Marcono1234:gson-record-type-adapter-factory:v0.2.0'
    implementation 'org.jsoup:jsoup:1.15.3'
}

ext.getPluginChangelog = { ->
    StringBuilder changelogHtml = new StringBuilder()

    for (item in changelog.getAll().values()) {
        if (item.isUnreleased) {
            continue
        }

        changelogHtml.append("<h3>" + item.version + "</h3>\n")
        changelogHtml.append("<ul>")

        for (section in item.getSections()) {
            String changesType = section.getKey()

            for ( sectionItem in section.getValue() ) {
                changelogHtml.append("<li>[" + changesType + "] " + sectionItem.substring(2) + "</li>\n")
            }
        }

        changelogHtml.append("</ul>\n")
    }

    return changelogHtml.toString()
}

sonarqube {}

changelog {
    path = "${project.projectDir}/Changelog.md"
    header = "[${-> version.get()}] - ${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}"
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version = "2023.1"
    plugins = [
        // See https://plugins.jetbrains.com/plugin/9768-emmylua/versions
        "com.tang:1.4.7-IDEA231"
    ]
}

runPluginVerifier {}

patchPluginXml {
    changeNotes = getPluginChangelog()
    sinceBuild = "231"
    untilBuild = "232.*"
    version = project.version
}

test {
    useJUnitPlatform()

    reports {
        junitXml.outputLocation = layout.buildDirectory.dir('reports/junit/xml')
        html.outputLocation = layout.buildDirectory.dir('reports/junit/html')
    }

    finalizedBy jacocoTestReport

    systemProperty("junit.jupiter.execution.parallel.enabled", true)
    systemProperty("junit.jupiter.execution.parallel.mode.default", "concurrent")

    jacoco {
        // https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin-faq.html#jacoco-reports-0-coverage
        includeNoLocationClasses = true
        excludes = ["jdk.internal.*"]
    }
}

jacocoTestReport {
    dependsOn test
    classDirectories.setFrom(instrumentCode)
    reports {
        xml.required = true
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/report.xml')
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }
}

jacocoTestCoverageVerification {
    classDirectories.setFrom(instrumentCode)
}
